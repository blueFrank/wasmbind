#pragma once

#include <emlite/emlite.hpp>
#include <jsbind/jsbind.hpp>
#include "enums.hpp"

class ShadowRoot;
class HTMLFormElement;
class ValidityStateFlags;
class HTMLElement;
class ValidityState;
class NodeList;
class CustomStateSet;
class Element;


class ValidityStateFlags : public emlite::Val {
  explicit ValidityStateFlags(Handle h) noexcept;
public:
    static ValidityStateFlags take_ownership(Handle h) noexcept;
    explicit ValidityStateFlags(const emlite::Val &val) noexcept;
    ValidityStateFlags() noexcept;
    ValidityStateFlags clone() const noexcept;
    bool valueMissing() const;
    void valueMissing(bool value);
    bool typeMismatch() const;
    void typeMismatch(bool value);
    bool patternMismatch() const;
    void patternMismatch(bool value);
    bool tooLong() const;
    void tooLong(bool value);
    bool tooShort() const;
    void tooShort(bool value);
    bool rangeUnderflow() const;
    void rangeUnderflow(bool value);
    bool rangeOverflow() const;
    void rangeOverflow(bool value);
    bool stepMismatch() const;
    void stepMismatch(bool value);
    bool badInput() const;
    void badInput(bool value);
    bool customError() const;
    void customError(bool value);
};

class ElementInternals : public emlite::Val {
    explicit ElementInternals(Handle h) noexcept;

public:
    explicit ElementInternals(const emlite::Val &val) noexcept;
    static ElementInternals take_ownership(Handle h) noexcept;

    ElementInternals clone() const noexcept;
    ShadowRoot shadowRoot() const;
    jsbind::Undefined setFormValue(const jsbind::Any& value);
    jsbind::Undefined setFormValue(const jsbind::Any& value, const jsbind::Any& state);
    HTMLFormElement form() const;
    jsbind::Undefined setValidity();
    jsbind::Undefined setValidity(const ValidityStateFlags& flags);
    jsbind::Undefined setValidity(const ValidityStateFlags& flags, const jsbind::String& message);
    jsbind::Undefined setValidity(const ValidityStateFlags& flags, const jsbind::String& message, const HTMLElement& anchor);
    bool willValidate() const;
    ValidityState validity() const;
    jsbind::String validationMessage() const;
    bool checkValidity();
    bool reportValidity();
    NodeList labels() const;
    CustomStateSet states() const;
    jsbind::String role() const;
    void role(const jsbind::String& value);
    Element ariaActiveDescendantElement() const;
    void ariaActiveDescendantElement(const Element& value);
    jsbind::String ariaAtomic() const;
    void ariaAtomic(const jsbind::String& value);
    jsbind::String ariaAutoComplete() const;
    void ariaAutoComplete(const jsbind::String& value);
    jsbind::String ariaBrailleLabel() const;
    void ariaBrailleLabel(const jsbind::String& value);
    jsbind::String ariaBrailleRoleDescription() const;
    void ariaBrailleRoleDescription(const jsbind::String& value);
    jsbind::String ariaBusy() const;
    void ariaBusy(const jsbind::String& value);
    jsbind::String ariaChecked() const;
    void ariaChecked(const jsbind::String& value);
    jsbind::String ariaColCount() const;
    void ariaColCount(const jsbind::String& value);
    jsbind::String ariaColIndex() const;
    void ariaColIndex(const jsbind::String& value);
    jsbind::String ariaColIndexText() const;
    void ariaColIndexText(const jsbind::String& value);
    jsbind::String ariaColSpan() const;
    void ariaColSpan(const jsbind::String& value);
    jsbind::TypedArray<Element> ariaControlsElements() const;
    void ariaControlsElements(const jsbind::TypedArray<Element>& value);
    jsbind::String ariaCurrent() const;
    void ariaCurrent(const jsbind::String& value);
    jsbind::TypedArray<Element> ariaDescribedByElements() const;
    void ariaDescribedByElements(const jsbind::TypedArray<Element>& value);
    jsbind::String ariaDescription() const;
    void ariaDescription(const jsbind::String& value);
    jsbind::TypedArray<Element> ariaDetailsElements() const;
    void ariaDetailsElements(const jsbind::TypedArray<Element>& value);
    jsbind::String ariaDisabled() const;
    void ariaDisabled(const jsbind::String& value);
    jsbind::TypedArray<Element> ariaErrorMessageElements() const;
    void ariaErrorMessageElements(const jsbind::TypedArray<Element>& value);
    jsbind::String ariaExpanded() const;
    void ariaExpanded(const jsbind::String& value);
    jsbind::TypedArray<Element> ariaFlowToElements() const;
    void ariaFlowToElements(const jsbind::TypedArray<Element>& value);
    jsbind::String ariaHasPopup() const;
    void ariaHasPopup(const jsbind::String& value);
    jsbind::String ariaHidden() const;
    void ariaHidden(const jsbind::String& value);
    jsbind::String ariaInvalid() const;
    void ariaInvalid(const jsbind::String& value);
    jsbind::String ariaKeyShortcuts() const;
    void ariaKeyShortcuts(const jsbind::String& value);
    jsbind::String ariaLabel() const;
    void ariaLabel(const jsbind::String& value);
    jsbind::TypedArray<Element> ariaLabelledByElements() const;
    void ariaLabelledByElements(const jsbind::TypedArray<Element>& value);
    jsbind::String ariaLevel() const;
    void ariaLevel(const jsbind::String& value);
    jsbind::String ariaLive() const;
    void ariaLive(const jsbind::String& value);
    jsbind::String ariaModal() const;
    void ariaModal(const jsbind::String& value);
    jsbind::String ariaMultiLine() const;
    void ariaMultiLine(const jsbind::String& value);
    jsbind::String ariaMultiSelectable() const;
    void ariaMultiSelectable(const jsbind::String& value);
    jsbind::String ariaOrientation() const;
    void ariaOrientation(const jsbind::String& value);
    jsbind::TypedArray<Element> ariaOwnsElements() const;
    void ariaOwnsElements(const jsbind::TypedArray<Element>& value);
    jsbind::String ariaPlaceholder() const;
    void ariaPlaceholder(const jsbind::String& value);
    jsbind::String ariaPosInSet() const;
    void ariaPosInSet(const jsbind::String& value);
    jsbind::String ariaPressed() const;
    void ariaPressed(const jsbind::String& value);
    jsbind::String ariaReadOnly() const;
    void ariaReadOnly(const jsbind::String& value);
    jsbind::String ariaRelevant() const;
    void ariaRelevant(const jsbind::String& value);
    jsbind::String ariaRequired() const;
    void ariaRequired(const jsbind::String& value);
    jsbind::String ariaRoleDescription() const;
    void ariaRoleDescription(const jsbind::String& value);
    jsbind::String ariaRowCount() const;
    void ariaRowCount(const jsbind::String& value);
    jsbind::String ariaRowIndex() const;
    void ariaRowIndex(const jsbind::String& value);
    jsbind::String ariaRowIndexText() const;
    void ariaRowIndexText(const jsbind::String& value);
    jsbind::String ariaRowSpan() const;
    void ariaRowSpan(const jsbind::String& value);
    jsbind::String ariaSelected() const;
    void ariaSelected(const jsbind::String& value);
    jsbind::String ariaSetSize() const;
    void ariaSetSize(const jsbind::String& value);
    jsbind::String ariaSort() const;
    void ariaSort(const jsbind::String& value);
    jsbind::String ariaValueMax() const;
    void ariaValueMax(const jsbind::String& value);
    jsbind::String ariaValueMin() const;
    void ariaValueMin(const jsbind::String& value);
    jsbind::String ariaValueNow() const;
    void ariaValueNow(const jsbind::String& value);
    jsbind::String ariaValueText() const;
    void ariaValueText(const jsbind::String& value);
};

